
//Define constants
unsigned long frontDistance = 0;
unsigned long leftDistance = 0;
unsigned long rightDistance = 0;

int target = 1;
int targetVariable = 5;
int targetOvershoot = 1;

//Declares the variable for distance to move forward from dead end (cm)
const int deadEndOut = 10;
//U-Turn counter
int uTurns = 0;
//time the robot spins for while cornering (milliseconds)
int spinDelay = 150;

//Sets speed for motors
int leftSpeed = 0;
int rightSpeed = 0;

//Pins for H Bridge
const int motorLeft = A0; //pin 1 on H Bridge. Must be analog
const int motorRight = A1; //pin 9 on H Bridge. Must be analog
const int left1 = 8; //pin 2 on H Bridge
const int left2 = 9; //pin 7 on H Bridge
const int right1 = 10; //pin 10 on H Bridge
const int right2 = 11; //pin 15 on H Bridge

// Right Ultrasonic sensor pins
const int rightTrig = 3;
const int rightEcho = 2; 
// Left Ultrasonic sensor pins
const int leftTrig = 5;
const int leftEcho = 4; 
// Front Ultrasonic sensor pins
const int frontTrig = 6;
const int frontEcho = 7; 


void setup() {
  Serial.begin(9600);
  
  //Pinmodes
  //Pins for the H-bridge
  pinMode(motorLeft, OUTPUT);
  pinMode(motorRight, OUTPUT);
  pinMode(left1, OUTPUT);
  pinMode(left2, OUTPUT);
  pinMode(right1, OUTPUT);
  pinMode(right2, OUTPUT);
  
  //Pins for Ultrasonic Sensors
  pinMode(rightEcho, INPUT);
  pinMode(rightTrig, OUTPUT);
  pinMode(leftEcho, INPUT);
  pinMode(leftTrig, OUTPUT);
  pinMode(frontEcho, INPUT);
  pinMode(frontTrig, OUTPUT);
  
}


void loop() { 
  // taking sensor data
  frontSensor();
  leftSensor();
  rightSensor();
  Serial.println (frontDistance);
  Serial.println (rightDistance);
  Serial.println (leftDistance);

  //setting speed based on front sensor distance
  if (frontDistance > 12) {    
    //adjust left and right to not hit walls
    if (rightDistance > leftDistance) {
        adjustRight();
        Serial.println("Adjusting Right");
        goForward();
        delay(100);
        noSpeed();
    }
    
    else if (rightDistance < leftDistance) {
        adjustLeft();
        Serial.println("Adjusting Left");
        goForward();
        delay(100);
        noSpeed();
    }
    if (rightDistance > leftDistance) {
        adjustRight();
        Serial.println("Adjusting Right");
        goForward();
        delay(200);
        noSpeed();
    }
    
    else if (rightDistance < leftDistance) {
        adjustLeft();
        Serial.println("Adjusting Left");
        goForward();
        delay(200);
        noSpeed();
    } 
  fullSpeed();
    Serial.println ("Full Speed");
    delay(600);
    noSpeed();  
  }
  //Robot moves at halfspeed to get closer to the wall in a safer manner
  else if (frontDistance <= 12){
    halfSpeed();
    Serial.println ("Half Speed");
    delay(200);
    noSpeed();
  }
  //Sets the robot to stop when it is close to a wall infront
  else if (frontDistance < 3){
    noSpeed();
    Serial.println ("Stop");
  }
  
  //checking if Motorspeed is 0 and that the front distance is small enough to be around the corner
  if (leftSpeed == 0 && rightSpeed == 0 && frontDistance <= 4) {
    frontSensor();
    leftSensor();
    rightSensor();
    Serial.println (frontDistance);
    Serial.println (rightDistance);
    Serial.println (leftDistance);
    //logic for tuning left or right or 180
    
    //left is further than or the same as right
    if (leftDistance >= rightDistance) {
      
      //Dead end check
      if (leftDistance - rightDistance > 5) {
        
        //not a dead end, checking it is a T Junction
        if (rightDistance - frontDistance > 3) {
          turnLeft();
          Serial.println ("T junction Left, Turn left");
        }
        
        //checking its a left turn only
        else if (rightDistance - frontDistance <= 3) {
          turnLeft();
          Serial.println ("Turn left");
        }
        
      }
      //Dead End
      else if (leftDistance-rightDistance <= 5) {
        turn180();
        Serial.println ("Turn 180");
      }
    }
    
    //Right is Further than left
    else if (rightDistance > leftDistance) {
      
      //Dead End check
      if (rightDistance - leftDistance > 5){
        
        //Checking it is only a right turn
        if (leftDistance - frontDistance <= 5){
            turnRight();
            Serial.println ("Turn right");
        }

        //Confirming it is a T junction
        else if (leftDistance - rightDistance > 5){
            turnRight();
            Serial.println ("T junction Right, Turn left");
        }
      }
      
      //Dead End
      else if (rightDistance - leftDistance <= 5){
        turn180();
        Serial.println ("Turn 180 End statement");
      }
    }
  }    
}

//Sets motors to Fullspeed, or full chosen speed
void fullSpeed() {
  leftSpeed = 240;
  rightSpeed = 240;
  
  //sets motors to full speed by allowing the pwm to be 255/255
  analogWrite(motorLeft, leftSpeed);
  analogWrite(motorRight, rightSpeed);
  
  //Sets the direction the motorspins. Change these to get motor to spin correct way.
  digitalWrite(left1, LOW);
  digitalWrite(left2, HIGH);
  digitalWrite(right1, HIGH);
  digitalWrite(right2, LOW);

}

//Sets motors to Half Speed, or full speed but half the duration in delay
void halfSpeed() {
  leftSpeed = 240;
  rightSpeed = 240;
  
  //sets motors to half speed by allowing the pwm to be 255/255
  analogWrite(motorLeft, leftSpeed);
  analogWrite(motorRight, rightSpeed);
  
  //Sets the direction the motorspins. Change these to get motor to spin correct way.
  digitalWrite(left1, LOW);
  digitalWrite(left2, HIGH);
  digitalWrite(right1, HIGH);
  digitalWrite(right2, LOW);
}

//Set Motors to stop
void noSpeed() {
  leftSpeed = 0;
  rightSpeed = 0;
  
  //sets motors to zero speed by allowing the pwm to be 0/255
  analogWrite(motorLeft, leftSpeed);
  analogWrite(motorRight, rightSpeed);
  
  //Sets the direction the motorspins. Change these to get motor to spin correct way.
  digitalWrite(left1, LOW);
  digitalWrite(left2, HIGH);
  digitalWrite(right1, HIGH);
  digitalWrite(right2, LOW);
}

//Adjust the robot left while moving forward
void adjustLeft() {
  //Lowers the speed of the left wheel to turn the robot left
  leftSpeed = leftSpeed + 150;
  //To turn the robot left and to keep the speed up
  rightSpeed = rightSpeed + 50;
  //To apply the new motorspeed
  analogWrite(motorLeft, leftSpeed);
  analogWrite(motorRight, rightSpeed);
}

//Adjust the robot right while moving forward
void adjustRight() {
  //To turn the robot right and to keep the speed up
  leftSpeed = leftSpeed + 50;
  //Lowers the speed of the right wheel to turn the robot right
  rightSpeed = rightSpeed + 150;
  //To apply the new motorspeed
  analogWrite(motorLeft, leftSpeed);
  analogWrite(motorRight, rightSpeed);
}

//Get left sensor value
void leftSensor() {
  //triggers tge trig pin on the sensor
  digitalWrite(leftTrig, HIGH);
  delay(10);
  digitalWrite(leftTrig, LOW);
  //recieves signal
  leftDistance = pulseIn(leftEcho, HIGH);
  //Sets the distance to a maximum of 200cm
  if (leftDistance > 11765){
    leftDistance = 11765;
  }
  //math to convert pulse time to cm
  leftDistance = (340 * leftDistance/2)/10000;
  delay(10);
  pulseIn(leftEcho, LOW);
}

//Get right sensor value
void rightSensor() {
  //triggers the trig pin on the sensor
  digitalWrite(rightTrig, HIGH);
  delay(10);
  digitalWrite(rightTrig, LOW);
  //recieves the signal
  rightDistance = pulseIn(rightEcho, HIGH);
  //sets the distance to a maximum of 200 cm
  if (rightDistance > 11765){
    rightDistance = 11765;
  }
  //Math to convert the sensor pulse time into cm
  rightDistance = (340 * rightDistance/2)/10000;
  delay(10);
  pulseIn(rightEcho, LOW);
}

//Get front sensor value
void frontSensor() {
  //Triggers the trig pin
  digitalWrite(frontTrig, HIGH);
  delay(10);
  digitalWrite(frontTrig, LOW);
  //recieves the signal
  frontDistance = pulseIn(frontEcho, HIGH);
  //Sets the distance to a maximum of 200cm
  if (frontDistance > 11765){
    frontDistance = 11765;
  }
  //math to change pulse time to cm
  frontDistance = (340 * frontDistance/2)/10000;
  delay(10);
  pulseIn(frontEcho, LOW);
}

//Turn left while not moving forward
void turnLeft() {
  frontSensor();
  Serial.println(frontDistance);
  leftSensor();
  Serial.println(leftDistance);
  //Sets variable target as the distance the front sensor will want to see before stopping rotation
  target = leftDistance - targetVariable;
  targetOvershoot = rightDistance + 8;
  
  Serial.println("Left Target");
  Serial.println(target);
  //spins and checks if it has spun enough
  while (frontDistance < target /*|| frontDistance > targetOvershoot*/){
    spinLeft();
    delay(spinDelay);
    noSpeed();
    frontSensor();
    Serial.println("Current front: ");
    Serial.println(frontDistance);
  
  }
  //resets uturn counter
  uTurns = 0;
  spinLeft();
  delay(spinDelay);
  noSpeed();
}

//Turn right while not moving forward
void turnRight(){
  frontSensor();
  rightSensor();
  //Sets variable target as the distance the front sensor will want to see before stopping rotation
  target = rightDistance - targetVariable;
  targetOvershoot = rightDistance + 8;
  
  Serial.println("Right Target");
  Serial.println(target);
  //spins and checks if it has spun enough
  while (frontDistance < target /*|| frontDistance > targetOvershoot*/){
    spinRight();
    delay(spinDelay);
    noSpeed();
    frontSensor();
    Serial.println("Current front: ");
    Serial.println(frontDistance);
  }
  //resets uturn counter
  uTurns = 0;
  spinRight();
  delay(spinDelay);
  noSpeed();  
}

//Turn 180 at a deadend
void turn180(){
  /* TURN TILL FRONT >= DEADENDOUT, OR STORE LEFT AND RIGHT VALUES AND SPIN TILL THEY ARE WITHIN 2 CM OF THE STORED ORIGINAL VALUE BEFORE TURNING USE UTURN COUNTER */
  frontSensor();
  while (frontDistance < deadEndOut) {
    spinLeft();
    delay(spinDelay);
    noSpeed();
    frontSensor();
  }
  //counts the amount of 180's made incase of dead end alley with escape along the side
  uTurns = uTurns + 1;

}


void spinLeft(){
  //Sets speed the motors will spin at for spinning
  leftSpeed = 150;
  rightSpeed = 150;
  Serial.println("Spinning Left");
  analogWrite(motorLeft, leftSpeed);
  analogWrite(motorRight, rightSpeed);
  
  //Sets the direction the motorspins. Change these to get motor to spin correct way.
  digitalWrite(left1, LOW);
  digitalWrite(left2, HIGH);
  digitalWrite(right1, LOW);
  digitalWrite(right2, HIGH);
}


void spinRight(){
  //Sets speed the motors will spin at for spinning
  leftSpeed = 150;
  rightSpeed = 150;
  Serial.println("Spinning right");
  analogWrite(motorLeft, leftSpeed);
  analogWrite(motorRight, rightSpeed);
  
  //Sets the direction the motorspins. Change these to get motor to spin correct way.
  digitalWrite(left1, HIGH);
  digitalWrite(left2, LOW);
  digitalWrite(right1, HIGH);
  digitalWrite(right2, LOW);
}

//Code to adjust the robot to keep it in the middle of the vent
void goForward(){
  leftSpeed = leftSpeed;
  rightSpeed = rightSpeed;
  Serial.println ("Adjusted");
  analogWrite(motorLeft, leftSpeed);
  analogWrite(motorRight, rightSpeed);

  digitalWrite(left1, LOW);
  digitalWrite(left2, HIGH);
  digitalWrite(right1, HIGH);
  digitalWrite(right2, LOW);
}
